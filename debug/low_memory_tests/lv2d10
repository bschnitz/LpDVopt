                     SINGULAR                                 /  Development
 A Computer Algebra System for Polynomial Computations       /   version spielwiese
                                                           0<
 by: W. Decker, G.-M. Greuel, G. Pfister, H. Schoenemann     \   
FB Mathematik der Universitaet, D-67653 Kaiserslautern        \
// ** executing /home/ben/data/coding/box/LpDVec/Singular/LIB/.singularrc
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/freegb.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/bfun.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/presolve.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/elim.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/poly.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/ring.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/primdec.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/absfact.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/triang.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/random.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/matrix.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/general.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/inout.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/nctools.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/dmodapp.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/sing.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/gkdim.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/dmod.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/control.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/homolog.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/deform.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/gmssing.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/linalg.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/qhmoduli.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/rinvar.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/zeroset.lib $Id$
// ** loaded /home/ben/data/coding/box/LpDVec/Singular/LIB/primitiv.lib $Id$
[3:21]2ss3s(2)s4(6)s(11)s(16)s(23)s(29)-5-s(33)s(42)s(51)s(58)s(68)s(84)--------6-s(88)s(100)s(109)s(117)s(132)-s(142)---s(157)s(169)-----------------7-s(161)s(170)s(176)s(181)s(191)-s(198)---s(205)-s(212)------s(216)-s(223)-----------------------(200)-8-s(204)s(209)s(213)s(216)s(223)-s(227)---s(231)-s(235)-----s(237)-s(241)-------------s(233)-s(237)---------------------------------9-s(206)s(208)s(211)s(213)s(216)-s(218)---s-s(220)-----s(218)-s(220)------------s(211)-s(213)-------------(200)---------s(194)-s(196)----------------------------------------------10-s(148)s(147)s(146)s(145)s(144)-s(142)---s(138)-s(136)-----s(130)-s(128)-------s(120)-s(118)------------------(100)-s(98)-s(96)-------------------------------s(64)-s(62)--------------------------------------------------------------
(S:73)-------------------------------------------------------------------------
product criterion:452 chain criterion:105
shift V criterion:15331
x(1)*y(2)+y(1)*z(2),x(1)*x(2)-y(1)*x(2)-y(1)*y(2)-y(1)*z(2),y(1)*y(2)*y(3)-y(1)*y(2)*z(3)+y(1)*z(2)*y(3)-y(1)*z(2)*z(3),y(1)*y(2)*x(3)+y(1)*y(2)*z(3)+y(1)*z(2)*x(3)+y(1)*z(2)*z(3),y(1)*z(2)*y(3)*y(4)-y(1)*z(2)*y(3)*z(4)+y(1)*z(2)*z(3)*y(4)-y(1)*z(2)*z(3)*z(4),y(1)*z(2)*y(3)*x(4)+y(1)*z(2)*y(3)*z(4)+y(1)*z(2)*z(3)*x(4)+y(1)*z(2)*z(3)*z(4),y(1)*y(2)*z(3)*y(4)-y(1)*y(2)*z(3)*z(4)+y(1)*z(2)*z(3)*y(4)-y(1)*z(2)*z(3)*z(4),y(1)*y(2)*z(3)*x(4)+y(1)*y(2)*z(3)*z(4)+y(1)*z(2)*z(3)*x(4)+y(1)*z(2)*z(3)*z(4),y(1)*z(2)*z(3)*y(4)*y(5)-y(1)*z(2)*z(3)*y(4)*z(5)+y(1)*z(2)*z(3)*z(4)*y(5)-y(1)*z(2)*z(3)*z(4)*z(5),y(1)*z(2)*z(3)*y(4)*x(5)+y(1)*z(2)*z(3)*y(4)*z(5)+y(1)*z(2)*z(3)*z(4)*x(5)+y(1)*z(2)*z(3)*z(4)*z(5),y(1)*z(2)*y(3)*z(4)*y(5)-y(1)*z(2)*y(3)*z(4)*z(5)+y(1)*z(2)*z(3)*z(4)*y(5)-y(1)*z(2)*z(3)*z(4)*z(5),y(1)*z(2)*y(3)*z(4)*x(5)+y(1)*z(2)*y(3)*z(4)*z(5)+y(1)*z(2)*z(3)*z(4)*x(5)+y(1)*z(2)*z(3)*z(4)*z(5),y(1)*y(2)*z(3)*z(4)*y(5)-y(1)*y(2)*z(3)*z(4)*z(5)+y(1)*z(2)*z(3)*z(4)*y(5)-y(1)*z(2)*z(3)*z(4)*z(5),y(1)*y(2)*z(3)*z(4)*x(5)+y(1)*y(2)*z(3)*z(4)*z(5)+y(1)*z(2)*z(3)*z(4)*x(5)+y(1)*z(2)*z(3)*z(4)*z(5),y(1)*z(2)*z(3)*z(4)*y(5)*y(6)-y(1)*z(2)*z(3)*z(4)*y(5)*z(6)+y(1)*z(2)*z(3)*z(4)*z(5)*y(6)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6),y(1)*z(2)*z(3)*z(4)*y(5)*x(6)+y(1)*z(2)*z(3)*z(4)*y(5)*z(6)+y(1)*z(2)*z(3)*z(4)*z(5)*x(6)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6),y(1)*z(2)*z(3)*y(4)*z(5)*y(6)-y(1)*z(2)*z(3)*y(4)*z(5)*z(6)+y(1)*z(2)*z(3)*z(4)*z(5)*y(6)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6),y(1)*z(2)*z(3)*y(4)*z(5)*x(6)+y(1)*z(2)*z(3)*y(4)*z(5)*z(6)+y(1)*z(2)*z(3)*z(4)*z(5)*x(6)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6),y(1)*z(2)*y(3)*z(4)*z(5)*y(6)-y(1)*z(2)*y(3)*z(4)*z(5)*z(6)+y(1)*z(2)*z(3)*z(4)*z(5)*y(6)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6),y(1)*z(2)*y(3)*z(4)*z(5)*x(6)+y(1)*z(2)*y(3)*z(4)*z(5)*z(6)+y(1)*z(2)*z(3)*z(4)*z(5)*x(6)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6),y(1)*y(2)*z(3)*z(4)*z(5)*y(6)-y(1)*y(2)*z(3)*z(4)*z(5)*z(6)+y(1)*z(2)*z(3)*z(4)*z(5)*y(6)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6),y(1)*y(2)*z(3)*z(4)*z(5)*x(6)+y(1)*y(2)*z(3)*z(4)*z(5)*z(6)+y(1)*z(2)*z(3)*z(4)*z(5)*x(6)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6),y(1)*z(2)*z(3)*z(4)*z(5)*y(6)*y(7)-y(1)*z(2)*z(3)*z(4)*z(5)*y(6)*z(7)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*y(7)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7),y(1)*z(2)*z(3)*z(4)*z(5)*y(6)*x(7)+y(1)*z(2)*z(3)*z(4)*z(5)*y(6)*z(7)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*x(7)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7),y(1)*z(2)*z(3)*z(4)*y(5)*z(6)*y(7)-y(1)*z(2)*z(3)*z(4)*y(5)*z(6)*z(7)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*y(7)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7),y(1)*z(2)*z(3)*z(4)*y(5)*z(6)*x(7)+y(1)*z(2)*z(3)*z(4)*y(5)*z(6)*z(7)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*x(7)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7),y(1)*z(2)*z(3)*y(4)*z(5)*z(6)*y(7)-y(1)*z(2)*z(3)*y(4)*z(5)*z(6)*z(7)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*y(7)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7),y(1)*z(2)*z(3)*y(4)*z(5)*z(6)*x(7)+y(1)*z(2)*z(3)*y(4)*z(5)*z(6)*z(7)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*x(7)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7),y(1)*z(2)*y(3)*z(4)*z(5)*z(6)*y(7)-y(1)*z(2)*y(3)*z(4)*z(5)*z(6)*z(7)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*y(7)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7),y(1)*z(2)*y(3)*z(4)*z(5)*z(6)*x(7)+y(1)*z(2)*y(3)*z(4)*z(5)*z(6)*z(7)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*x(7)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7),y(1)*y(2)*z(3)*z(4)*z(5)*z(6)*y(7)-y(1)*y(2)*z(3)*z(4)*z(5)*z(6)*z(7)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*y(7)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7),y(1)*y(2)*z(3)*z(4)*z(5)*z(6)*x(7)+y(1)*y(2)*z(3)*z(4)*z(5)*z(6)*z(7)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*x(7)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7),y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*y(7)*y(8)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*y(7)*z(8)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*y(8)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8),y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*y(7)*x(8)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*y(7)*z(8)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*x(8)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8),y(1)*z(2)*z(3)*z(4)*z(5)*y(6)*z(7)*y(8)-y(1)*z(2)*z(3)*z(4)*z(5)*y(6)*z(7)*z(8)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*y(8)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8),y(1)*z(2)*z(3)*z(4)*z(5)*y(6)*z(7)*x(8)+y(1)*z(2)*z(3)*z(4)*z(5)*y(6)*z(7)*z(8)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*x(8)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8),y(1)*z(2)*z(3)*z(4)*y(5)*z(6)*z(7)*y(8)-y(1)*z(2)*z(3)*z(4)*y(5)*z(6)*z(7)*z(8)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*y(8)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8),y(1)*z(2)*z(3)*z(4)*y(5)*z(6)*z(7)*x(8)+y(1)*z(2)*z(3)*z(4)*y(5)*z(6)*z(7)*z(8)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*x(8)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8),y(1)*z(2)*z(3)*y(4)*z(5)*z(6)*z(7)*y(8)-y(1)*z(2)*z(3)*y(4)*z(5)*z(6)*z(7)*z(8)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*y(8)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8),y(1)*z(2)*z(3)*y(4)*z(5)*z(6)*z(7)*x(8)+y(1)*z(2)*z(3)*y(4)*z(5)*z(6)*z(7)*z(8)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*x(8)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8),y(1)*z(2)*y(3)*z(4)*z(5)*z(6)*z(7)*y(8)-y(1)*z(2)*y(3)*z(4)*z(5)*z(6)*z(7)*z(8)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*y(8)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8),y(1)*z(2)*y(3)*z(4)*z(5)*z(6)*z(7)*x(8)+y(1)*z(2)*y(3)*z(4)*z(5)*z(6)*z(7)*z(8)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*x(8)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8),y(1)*y(2)*z(3)*z(4)*z(5)*z(6)*z(7)*y(8)-y(1)*y(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*y(8)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8),y(1)*y(2)*z(3)*z(4)*z(5)*z(6)*z(7)*x(8)+y(1)*y(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*x(8)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8),y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*y(8)*y(9)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*y(8)*z(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*y(9)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9),y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*y(8)*x(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*y(8)*z(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*x(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9),y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*y(7)*z(8)*y(9)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*y(7)*z(8)*z(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*y(9)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9),y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*y(7)*z(8)*x(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*y(7)*z(8)*z(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*x(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9),y(1)*z(2)*z(3)*z(4)*z(5)*y(6)*z(7)*z(8)*y(9)-y(1)*z(2)*z(3)*z(4)*z(5)*y(6)*z(7)*z(8)*z(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*y(9)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9),y(1)*z(2)*z(3)*z(4)*z(5)*y(6)*z(7)*z(8)*x(9)+y(1)*z(2)*z(3)*z(4)*z(5)*y(6)*z(7)*z(8)*z(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*x(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9),y(1)*z(2)*z(3)*z(4)*y(5)*z(6)*z(7)*z(8)*y(9)-y(1)*z(2)*z(3)*z(4)*y(5)*z(6)*z(7)*z(8)*z(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*y(9)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9),y(1)*z(2)*z(3)*z(4)*y(5)*z(6)*z(7)*z(8)*x(9)+y(1)*z(2)*z(3)*z(4)*y(5)*z(6)*z(7)*z(8)*z(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*x(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9),y(1)*z(2)*z(3)*y(4)*z(5)*z(6)*z(7)*z(8)*y(9)-y(1)*z(2)*z(3)*y(4)*z(5)*z(6)*z(7)*z(8)*z(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*y(9)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9),y(1)*z(2)*z(3)*y(4)*z(5)*z(6)*z(7)*z(8)*x(9)+y(1)*z(2)*z(3)*y(4)*z(5)*z(6)*z(7)*z(8)*z(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*x(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9),y(1)*z(2)*y(3)*z(4)*z(5)*z(6)*z(7)*z(8)*y(9)-y(1)*z(2)*y(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*y(9)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9),y(1)*z(2)*y(3)*z(4)*z(5)*z(6)*z(7)*z(8)*x(9)+y(1)*z(2)*y(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*x(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9),y(1)*y(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*y(9)-y(1)*y(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*y(9)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9),y(1)*y(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*x(9)+y(1)*y(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*x(9)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9),y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*y(9)*y(10)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*y(9)*z(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*y(10)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*z(10),y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*y(9)*x(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*y(9)*z(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*x(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*z(10),y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*y(8)*z(9)*y(10)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*y(8)*z(9)*z(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*y(10)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*z(10),y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*y(8)*z(9)*x(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*y(8)*z(9)*z(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*x(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*z(10),y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*y(7)*z(8)*z(9)*y(10)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*y(7)*z(8)*z(9)*z(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*y(10)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*z(10),y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*y(7)*z(8)*z(9)*x(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*y(7)*z(8)*z(9)*z(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*x(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*z(10),y(1)*z(2)*z(3)*z(4)*z(5)*y(6)*z(7)*z(8)*z(9)*y(10)-y(1)*z(2)*z(3)*z(4)*z(5)*y(6)*z(7)*z(8)*z(9)*z(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*y(10)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*z(10),y(1)*z(2)*z(3)*z(4)*z(5)*y(6)*z(7)*z(8)*z(9)*x(10)+y(1)*z(2)*z(3)*z(4)*z(5)*y(6)*z(7)*z(8)*z(9)*z(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*x(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*z(10),y(1)*z(2)*z(3)*z(4)*y(5)*z(6)*z(7)*z(8)*z(9)*y(10)-y(1)*z(2)*z(3)*z(4)*y(5)*z(6)*z(7)*z(8)*z(9)*z(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*y(10)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*z(10),y(1)*z(2)*z(3)*z(4)*y(5)*z(6)*z(7)*z(8)*z(9)*x(10)+y(1)*z(2)*z(3)*z(4)*y(5)*z(6)*z(7)*z(8)*z(9)*z(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*x(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*z(10),y(1)*z(2)*z(3)*y(4)*z(5)*z(6)*z(7)*z(8)*z(9)*y(10)-y(1)*z(2)*z(3)*y(4)*z(5)*z(6)*z(7)*z(8)*z(9)*z(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*y(10)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*z(10),y(1)*z(2)*z(3)*y(4)*z(5)*z(6)*z(7)*z(8)*z(9)*x(10)+y(1)*z(2)*z(3)*y(4)*z(5)*z(6)*z(7)*z(8)*z(9)*z(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*x(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*z(10),y(1)*z(2)*y(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*y(10)-y(1)*z(2)*y(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*z(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*y(10)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*z(10),y(1)*z(2)*y(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*x(10)+y(1)*z(2)*y(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*z(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*x(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*z(10),y(1)*y(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*y(10)-y(1)*y(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*z(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*y(10)-y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*z(10),y(1)*y(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*x(10)+y(1)*y(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*z(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*x(10)+y(1)*z(2)*z(3)*z(4)*z(5)*z(6)*z(7)*z(8)*z(9)*z(10)

$Bye.
